#Jack chen
#Sulbha Choudhari

import config
from snakemake.utils import R
import os
import sys


#path to apps

sqanti = "Software/tools/SQANTI3/sqanti3_qc.py"
sqantif = "Software/tools/SQANTI3/sqanti3_RulesFilter.py"

cupcake = "Software/tools/SQANTI3/cDNA_Cupcake"
cagepeak = "Software/tools/SQANTI3/hg38.cage_peak_phase1and2combined_coord.bed"
polya = "Software/tools/SQANTI3/example/polyA.list"
table = "Software/scripts/bin/database/pacbio_isoseq_table1.py"
genebed = "Software/scripts/develop_script/pacbio_isoseq_genebed.py"

if config.reference == "hg38":
    ref = "RefGenomes/hg38_SEQC/hg38.fa"
    gtf = "RefGenomes/hg38/GTF/gencode.v36.annotation.gtf"
    jbed = "RefGenomes/hg38/GTF/gencode.v36.annotation.bed"

analysis = config.analysis
sample = analysis.split("/")[-1].split("Sample_")[1]

#outtab = config.outtab
cn = ""
st = 0
targetsam = sample + ".sorted.sam"
targeted = config.targeted

if targeted != "":
    cn = targeted.split(":")[0]
    st = int(targeted.split(":")[1].split("-")[0])
    ed = int(targeted.split(":")[1].split("-")[1])
    targetsam = sample + "sorted.targeted.sam"


rule all:
    input:  
            sample + ".sam",
			sample + ".sorted.sam",
            sample + ".collapsed.group.txt",
            sample + ".collapsed.rep.fa",
            sample + ".collapsed.abundance.txt",
            sample + ".sqanti_sqanti_report.pdf",
            sample +  ".sqanti_classification.filtered_lite.fasta",
            sample + ".isoseq_report.csv",
            sample + ".sqanti_corrected.sam",
            sample + ".sqanti_corrected_sorted.bam.bai",
            sample + ".sqanti_classification_genename.txt"


rule minimap2:
    input: sample + ".flnc.fastq"
    output: sample  + ".sam"
    params: batch = "--nodes=1 --ntasks=36"
    shell: "export PATH=/development/minimap2/2.17-r974/bin:$PATH; minimap2 -ax splice -t 36 -uf --secondary=no -C5 --junc-bed {jbed} {ref} {input} > {output}"

rule sort:
    input: sample + ".sam"
    output: sample + ".sorted.sam"
    params: batch = "--nodes=1 --ntasks=36"
    shell: "module load samtools; samtools sort -o {output} -@ 36 {input}"

rule targeted:
    input: sample +".sorted.sam"
    output: sample + ".sorted.targeted.sam"
    params: batch = "--nodes=1 --ntasks=8"
    run:
        import pysam
        samfile = pysam.AlignmentFile(sample + ".sorted.sam", "r")
        osamfile = pysam.AlignmentFile(sample + "sorted_targeted.sam", "w", template=samfile)

        for read in samfile:
            if read.reference_name == cn and read.reference_start > st and read.reference_start < ed:
                osamfile.write(read)

rule collapse:
    input: file1 = sample + ".flnc.fastq", file2 = targetsam
    output: sample + ".collapsed.group.txt", sample +  ".collapsed.rep.fa"
    params: batch = "--nodes=1 --ntasks=8", prefix = sample
    shell: """
            set +euo pipefail; export PATH=Software/tools/Anaconda/3.7/bin:$PATH; source activate cupcake; Software/tools/Anaconda/3.7/envs/cupcake/bin/collapse_isoforms_by_sam.py --input {input.file1} -s {input.file2} --dun-merge-5-shorter -o {params.prefix}
            """
rule get_abundance:
    input: sample + ".clustered.cluster_report.csv",
    output: sample + ".collapsed.abundance.txt"
    params: batch = "--nodes=1 --ntasks=8", prefix = sample + ".collapsed"
    shell:"set +euo pipefail; export PATH=Software/tools/Anaconda/3.7/bin:$PATH; source activate cupcake; Software/tools/Anaconda/3.7/envs/cupcake/bin/get_abundance_post_collapse.py {params.prefix} {input}"

rule sqanti:
    input: collapse = sample + ".collapsed.rep.fa", count = sample + ".collapsed.abundance.txt"
    output: sample + ".sqanti_sqanti_report.pdf",  sample + ".sqanti_classification.txt", sample + ".sqanti_corrected.faa",  sample + ".sqanti_corrected.gtf"
    params: nm = sample,  batch = "--nodes=1 --ntasks=16"
    shell: "set +euo pipefail; source development/sqanti3/0.1/.bashrc_sqanti3; python {sqanti} {input.collapse} {gtf} {ref} --aligner_choice=minimap2 -t 36 -o {params.nm}.sqanti -fl {input.count} --cage_peak {cagepeak} --polyA_motif_list {polya} --isoAnnotLite"

rule sqanti_filter:
    input: classfication = sample + ".sqanti_classification.txt", faa = sample +  ".sqanti_corrected.faa", sgtf= sample + ".sqanti_corrected.gtf"
    output: sample + ".sqanti_classification.filtered_lite.fasta", sample + ".sqanti_classification.filtered_lite_classification.txt"
    params: batch = "--nodes=1 --ntasks=16"
    shell: "set +euo pipefail; source /mnt/nasapps/development/sqanti3/0.1/.bashrc_sqanti3; python {sqantif} {input.classfication} {input.faa} {input.sgtf}"

rule genebed:
    input: sample + ".sqanti_classification.txt"
    output: sample + ".sqanti_classification_genename.txt"
    params: batch = "--nodes=1 --ntasks=8"    
    shell: "export PATH=/mnt/projects/CCR-SF/active/Software/tools/Anaconda/3.7/bin:$PATH; python {genebed} {gtf} {input} {output}"

rule sort_bam:
    input: sample + ".sqanti_corrected.sam"
    output: sample + ".sqanti_corrected_sorted.bam.bai", bam = sample + ".sqanti_corrected.bam", sort = sample + ".sqanti_corrected_sorted.bam" , log = sample + ".sqanti_corrected.bam.log"
    params: batch =  "--nodes=1 --ntasks=36"
    shell: "module load samtools; samtools view -bS {input} > {output.bam} 2>{output.log}; samtools sort -@ 8 {output.bam} -o {output.sort}; samtools index -@ 8 {output.sort}"

